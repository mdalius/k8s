apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nats
  namespace: production
  labels:
    app: nats
spec:
  selector:
    matchLabels:
      app: nats
  replicas: 3
  serviceName: "nats"
  template:
    metadata:
      labels:
        app: nats
      annotations:
        "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
    spec:
      # Common volumes for the containers
      volumes:
        - name: config-volume-ro
          configMap:
            name: nats-config
        - name: config-volume-rw
          emptyDir: {}
        - name: pid
          emptyDir: {}

      # Required to be able to HUP signal and apply config reload
      # to the server without restarting the pod.
      shareProcessNamespace: true
      terminationGracePeriodSeconds: 60
      initContainers:
        - name: init
          image: alpine:3.7
          command:
            - sh
            - -c
            - |
              # We need to loop through the list of regions and try to ping each one.
              # Then build a list of the regions that are reachable.
              # Then write the list of reachable regions to the nats.conf file replacing "$GATEWAYS"
              # Create dns list from the regions.
              DNS_RECORDS=""
              for REGION in $REGIONS; do
                DNS_RECORDS="$DNS_RECORDS nats-0.nats.$POD_NAMESPACE.svc.$REGION"
              done

              # Try to ping each of the regions.
              REACHABLE_REGIONS=""
              for DNS_RECORD in $DNS_RECORDS; do
                if ping -W 2 -c 1 $DNS_RECORD > /dev/null; then
                  REACHABLE_REGIONS="$REACHABLE_REGIONS $DNS_RECORD"
                fi
              done

              # Count the reachable regions.
              REACHABLE_REGION_COUNT=$(echo $REACHABLE_REGIONS | wc -w)

              echo "Reachable regions: $REACHABLE_REGIONS"
              echo "Reachable region count: $REACHABLE_REGION_COUNT"

              # Build array of nats gateways.
              NATS_GATEWAYS=""
              # If there are no reachable regions, then we'll use myself.
              if [ $REACHABLE_REGION_COUNT -eq 0 ]; then
                NATS_GATEWAYS="[{ \"name\": \"$NAME\", \"url\": \"nats\://nats-0.nats.$POD_NAMESPACE.svc.$NAME:7522\" }]"
              else
                NATS_GATEWAYS="["
                for REACHABLE_REGION in $REACHABLE_REGIONS; do
                  REGION=$(echo $REACHABLE_REGION | cut -d '.' -f5)
                  NATS_GATEWAYS="$NATS_GATEWAYS { \"name\": \"$REGION\", \"url\": \"nats://nats-0.nats.$POD_NAMESPACE.svc.$REGION:7522\" },"
                done
                NATS_GATEWAYS="$NATS_GATEWAYS ]"
              fi

              echo "NATS gateways: $NATS_GATEWAYS"

              # Copy the nats.conf file to the config-volume-rw volume.
              cp /tmp/nats.conf /etc/nats-config/nats.conf

              # Replace "$GATEWAYS" with the NATS gateways in the nats.conf file.
              sed -i "s|\$GATEWAYS|$NATS_GATEWAYS|" /etc/nats-config/nats.conf
          env:
            - name: NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-details
                  key: clusterName
            - name: REGIONS
              value: us-west1 us-west2 us-west3 us-west4 us-central1 us-east1 us-east4 us-east5 us-south1
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
            - name: config-volume-ro
              mountPath: /tmp
            - name: config-volume-rw
              mountPath: /etc/nats-config
      containers:
        - name: nats-exporter
          image: natsio/prometheus-nats-exporter:latest
          resources:
            requests:
              cpu: 10m
          args:
            - -varz
            - -use_internal_server_id
            - http://localhost:8222/
          ports:
            - containerPort: 7777
              name: metrics
          imagePullPolicy: Always
        - name: nats
          image: nats:alpine
          resources:
            requests:
              cpu: 200m
          ports:
            - containerPort: 4222
              name: client
              hostPort: 4222
            - containerPort: 7422
              name: leafnodes
              hostPort: 7422
            - containerPort: 6222
              name: cluster
            - containerPort: 8222
              name: monitor
          command:
            - "nats-server"
            - "--config"
            - "/etc/nats-config/nats.conf"
          env:
            - name: NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-details
                  key: clusterName
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: nats-url
                  key: user
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: nats-url
                  key: pass
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: ADVERTISE
              value: $(POD_NAME).nats.$(POD_NAMESPACE).svc.$(NAME)
            - name: JS_SERVER_NAME
              value: $(NAME)-$(POD_NAME)
          volumeMounts:
            - name: config-volume-rw
              mountPath: /etc/nats-config
            - name: pid
              mountPath: /var/run/nats
          livenessProbe:
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8222
            initialDelaySeconds: 10
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                # Using the alpine based NATS image, we add an extra sleep that is
                # the same amount as the terminationGracePeriodSeconds to allow
                # the NATS Server to gracefully terminate the client connections.
                #
                command: ["/bin/sh", "-c", "/nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]
          imagePullPolicy: Always
