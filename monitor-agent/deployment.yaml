apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent
  namespace: production
  annotations:
    prometheus.io/port: '9102'
  labels:
    component: grafana-agent
spec:
  replicas: 1
  selector:
    matchLabels:
      component: grafana-agent
  template:
    metadata:
      labels:
        component: grafana-agent
    spec:
      volumes:
        - name: config
          configMap:
            name: grafana-agent
      serviceAccount: manager
      containers:
        - name: grafana-agent
          image: grafana/agent:v0.27.1
          args:
            - -config.file=/etc/agent/agent.yaml
            - -enable-features=integrations-next
            - -server.http.address=0.0.0.0:80
            - -config.expand-env
          command:
            - /bin/agent
          ports:
          - containerPort: 80
            name: http-metrics
          volumeMounts:
            - mountPath: /etc/agent
              name: config
          env:
            - name: USER
              value: '81451'
            - name: PASS
              valueFrom:
                secretKeyRef:
                  name: prometheus-password
                  key: key
            - name: URL
              value: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
            - name: LOGSURL
              value: https://logs-prod-us-central1.grafana.net/loki/api/v1/push
            - name: LOGSUSER
              value: '39701'
            - name: LOGSPASS
              valueFrom:
                secretKeyRef:
                  name: loki-password
                  key: key
            - name: NAME
              valueFrom:
                configMapKeyRef:
                  name: cluster-details
                  key: clusterName
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: Always

# ---

# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: grafana-agent-logs
#   namespace: production
# spec:
#   minReadySeconds: 10
#   selector:
#     matchLabels:
#       name: grafana-agent-logs
#   template:
#     metadata:
#       labels:
#         name: grafana-agent-logs
#     spec:
#       containers:
#       - args:
#         - -config.file=/etc/agent/agent.yaml
#         - -server.http.address=0.0.0.0:80
#         - -config.expand-env
#         command:
#         - /bin/agent
#         env:
#         - name: USER
#           value: '81451'
#         - name: PASS
#           valueFrom:
#             secretKeyRef:
#               name: prometheus-password
#               key: key
#         - name: URL
#           value: https://prometheus-blocks-prod-us-central1.grafana.net/api/prom/push
#         - name: LOGSURL
#           value: https://logs-prod-us-central1.grafana.net/loki/api/v1/push
#         - name: LOGSUSER
#           value: '39701'
#         - name: LOGSPASS
#           valueFrom:
#             secretKeyRef:
#               name: loki-password
#               key: key
#         - name: NAME
#           valueFrom:
#             configMapKeyRef:
#               name: cluster-details
#               key: clusterName
#         - name: HOSTNAME
#           valueFrom:
#             fieldRef:
#               fieldPath: spec.nodeName
#         image: grafana/agent:v0.27.1
#         imagePullPolicy: IfNotPresent
#         name: grafana-agent-logs
#         ports:
#         - containerPort: 80
#           name: http-metrics
#         securityContext:
#           privileged: true
#           runAsUser: 0
#         volumeMounts:
#         - mountPath: /etc/agent
#           name: grafana-agent-logs
#         - mountPath: /var/log
#           name: varlog
#         - mountPath: /var/lib/docker/containers
#           name: varlibdockercontainers
#           readOnly: true
#       serviceAccountName: manager
#       tolerations:
#       - effect: NoSchedule
#         operator: Exists
#       volumes:
#       - configMap:
#           name: grafana-agent-logs
#         name: grafana-agent-logs
#       - hostPath:
#           path: /var/log
#         name: varlog
#       - hostPath:
#           path: /var/lib/docker/containers
#         name: varlibdockercontainers
#   updateStrategy:
#     type: RollingUpdate

---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: grafana-agent
  name: grafana-agent
  namespace: production
spec:
  clusterIP: None
  ports:
  - name: grafana-agent-http-metrics
    port: 80
    targetPort: 80
  selector:
    name: grafana-agent